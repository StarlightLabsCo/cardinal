// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

// Next Auth
// https://next-auth.js.org/
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Starlight
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  instances Instance[] // Game instances, think of it like a playthrough

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Instance {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  description String?

  characters Character[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Character {
  id String @id @default(cuid())

  name         String   @unique
  age          Int
  occupation   String
  personality  String[]
  systemPrompt String

  memories            Memory[]
  reflectionThreshold Float    @default(0)

  instance   Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String

  requestLogs OpenAIRequestLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Memory {
  id String @id @default(cuid())

  characterId String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  memory String

  embedding  Unsupported("vector(1536)")?
  importance Float
  accessedAt DateTime                     @default(now())

  time Float @default(0) // Game time

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OpenAIRequestLog {
  id Int @id @default(autoincrement())

  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId String

  tag String

  requestMethod  String
  requestUrl     String
  requestHeaders Json
  requestBody    String

  responseHeaders Json
  responseBody    Json
  responseTime    Int

  model            String
  promptTokens     Int
  completionTokens Int
  totalTokens      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tag])
}
